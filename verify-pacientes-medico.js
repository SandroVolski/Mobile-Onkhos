const mysql = require('mysql2/promise');
require('dotenv').config();

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'bd_sistema_clinicas',
  port: process.env.DB_PORT || 3306
};

async function verifyPacientesMedico() {
  let connection;

  try {
    console.log('üîç Verificando dados de pacientes e m√©dicos...');
    
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conectado ao banco de dados');

    // 1. Listar todos os m√©dicos mobile
    const [medicos] = await connection.execute(`
      SELECT id, nome, email, crm, clinica_id 
      FROM Medicos_Mobile 
      WHERE status = 'ativo'
      ORDER BY nome
    `);

    console.log('\nüë®‚Äç‚öïÔ∏è M√âDICOS MOBILE DISPON√çVEIS:');
    console.log('‚ïê'.repeat(80));
    
    for (const medico of medicos) {
      console.log(`\nüìã ${medico.nome}`);
      console.log(`   üÜî ID: ${medico.id}`);
      console.log(`   üè• Cl√≠nica ID: ${medico.clinica_id}`);
      console.log(`   üÜî CRM: ${medico.crm}`);
      
      // 2. Buscar prestador correspondente
      const [prestadores] = await connection.execute(`
        SELECT id, nome, crm, especialidade 
        FROM Prestadores 
        WHERE crm = ?
      `, [medico.crm]);

      if (prestadores.length > 0) {
        const prestador = prestadores[0];
        console.log(`   üè• Prestador: ${prestador.nome} (ID: ${prestador.id})`);
        console.log(`   üéØ Especialidade: ${prestador.especialidade}`);
        
        // 3. Buscar pacientes deste prestador
        const [pacientes] = await connection.execute(`
          SELECT 
            p.id, p.Paciente_Nome, p.status, p.telefone, p.email,
            pr.nome as prestador_nome
          FROM Pacientes_Clinica p
          LEFT JOIN Prestadores pr ON p.Prestador = pr.id
          WHERE p.clinica_id = ? AND p.Prestador = ?
          ORDER BY p.Paciente_Nome
        `, [medico.clinica_id, prestador.id]);

        console.log(`   üë• Pacientes: ${pacientes.length}`);
        
        if (pacientes.length > 0) {
          pacientes.forEach((paciente, index) => {
            console.log(`      ${index + 1}. ${paciente.Paciente_Nome}`);
            console.log(`         üìû ${paciente.telefone} | üìß ${paciente.email}`);
            console.log(`         üìä Status: ${paciente.status}`);
          });
        } else {
          console.log(`      ‚ö†Ô∏è  Nenhum paciente encontrado`);
        }
      } else {
        console.log(`   ‚ùå Prestador n√£o encontrado para CRM ${medico.crm}`);
      }
    }

    // 4. Testar a query de autentica√ß√£o
    console.log('\n\nüß™ TESTANDO QUERY DE AUTENTICA√á√ÉO:');
    console.log('‚ïê'.repeat(80));
    
    for (const medico of medicos) {
      console.log(`\nüîç Testando query para: ${medico.nome}`);
      
      const [queryResult] = await connection.execute(`
        SELECT 
          p.id, p.Paciente_Nome, p.status,
          pr.nome as prestador_nome,
          pr.crm as prestador_crm
        FROM Pacientes_Clinica p
        LEFT JOIN Prestadores pr ON p.Prestador = pr.id
        WHERE p.clinica_id = ? 
          AND p.Prestador IN (
            SELECT pr.id FROM Prestadores pr 
            INNER JOIN Medicos_Mobile m ON pr.crm = m.crm
            WHERE m.id = ? AND m.clinica_id = ?
          )
        ORDER BY p.Paciente_Nome
      `, [medico.clinica_id, medico.id, medico.clinica_id]);

      console.log(`   üìä Resultado: ${queryResult.length} pacientes encontrados`);
      
      if (queryResult.length > 0) {
        queryResult.forEach((paciente, index) => {
          console.log(`      ${index + 1}. ${paciente.Paciente_Nome} - Dr. ${paciente.prestador_nome}`);
        });
      }
    }

    console.log('\n\nüìã CREDENCIAIS PARA TESTE NO FRONTEND:');
    console.log('‚ïê'.repeat(80));
    medicos.forEach((medico, index) => {
      console.log(`${index + 1}. Email: ${medico.email}`);
      console.log(`   Senha: ${medico.crm}`);
      console.log(`   Nome: ${medico.nome}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Conex√£o fechada');
    }
  }
}

verifyPacientesMedico();
