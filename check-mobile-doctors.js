const mysql = require('mysql2/promise');
require('dotenv').config();

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'sistema_clinicas',
  port: process.env.DB_PORT || 3306
};

async function checkMobileDoctors() {
  let connection;

  try {
    console.log('üîç Verificando m√©dicos mobile no banco...');
    console.log('üìä Configura√ß√£o do banco:', {
      host: dbConfig.host,
      user: dbConfig.user,
      database: dbConfig.database,
      port: dbConfig.port
    });

    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conectado ao banco de dados');

    // Verificar se a tabela existe
    const [tables] = await connection.execute(`
      SHOW TABLES LIKE 'Medicos_Mobile'
    `);

    if (tables.length === 0) {
      console.log('‚ùå Tabela Medicos_Mobile n√£o existe!');
      console.log('üí° Execute primeiro: node setup-mobile-medicos.js');
      return;
    }

    // Buscar todos os m√©dicos mobile
    const [medicos] = await connection.execute(`
      SELECT 
        id, nome, email, crm, clinica_id, clinica_nome, 
        especialidade, status, created_at
      FROM Medicos_Mobile 
      ORDER BY nome
    `);

    console.log(`\nüë®‚Äç‚öïÔ∏è M√©dicos Mobile Encontrados: ${medicos.length}`);
    console.log('‚ïê'.repeat(80));

    if (medicos.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum m√©dico mobile cadastrado!');
      console.log('üí° Execute: node sync-doctors-from-main-system.js');
    } else {
      medicos.forEach((medico, index) => {
        console.log(`\n${index + 1}. ${medico.nome}`);
        console.log(`   üìß Email: ${medico.email}`);
        console.log(`   üÜî CRM: ${medico.crm}`);
        console.log(`   üè• Cl√≠nica: ${medico.clinica_nome || 'Sem cl√≠nica'} (ID: ${medico.clinica_id})`);
        console.log(`   üéØ Especialidade: ${medico.especialidade || 'N√£o informada'}`);
        console.log(`   ‚úÖ Status: ${medico.status}`);
        console.log(`   üìÖ Criado: ${medico.created_at}`);
        console.log('   ' + '‚îÄ'.repeat(50));
      });
    }

    // Verificar usu√°rios do sistema principal
    console.log('\nüîç Verificando usu√°rios do sistema principal...');
    const [usuarios] = await connection.execute(`
      SELECT 
        u.id, u.nome, u.email, u.role, u.status, u.clinica_id,
        c.nome as clinica_nome
      FROM Usuarios u
      LEFT JOIN Clinicas c ON u.clinica_id = c.id
      WHERE u.role = 'clinica' AND u.status = 'ativo'
      ORDER BY u.nome
    `);

    console.log(`\nüë• Usu√°rios Cl√≠nicos (Sistema Principal): ${usuarios.length}`);
    console.log('‚ïê'.repeat(80));

    if (usuarios.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio cl√≠nico encontrado no sistema principal!');
    } else {
      usuarios.forEach((usuario, index) => {
        console.log(`\n${index + 1}. ${usuario.nome}`);
        console.log(`   üìß Email: ${usuario.email}`);
        console.log(`   üè• Cl√≠nica: ${usuario.clinica_nome || 'Sem cl√≠nica'} (ID: ${usuario.clinica_id})`);
        console.log(`   ‚úÖ Status: ${usuario.status}`);
        console.log('   ' + '‚îÄ'.repeat(50));
      });
    }

    // Instru√ß√µes de uso
    console.log('\nüìã INSTRU√á√ïES DE USO:');
    console.log('‚ïê'.repeat(80));
    console.log('1. Para testar o login, use qualquer email/CRM listado acima');
    console.log('2. Formato: Email = email do m√©dico, Senha = CRM do m√©dico');
    console.log('3. Exemplo:');
    if (medicos.length > 0) {
      const primeiro = medicos[0];
      console.log(`   Email: ${primeiro.email}`);
      console.log(`   Senha: ${primeiro.crm}`);
    }
    console.log('\n4. Se n√£o houver m√©dicos mobile, execute:');
    console.log('   node sync-doctors-from-main-system.js');

  } catch (error) {
    console.error('‚ùå Erro ao verificar m√©dicos:', error);
  } finally {
    if (connection) await connection.end();
    console.log('\nüîå Conex√£o fechada');
  }
}

checkMobileDoctors();
