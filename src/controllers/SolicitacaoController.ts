import { Request, Response } from 'express';
import { SolicitacaoModel } from '../models/SolicitacaoModel';
import { ApiResponse } from '../types';

interface AuthRequest extends Request {
  user?: any;
}

// GET /api/mobile/solicitacoes - Listar solicita√ß√µes do m√©dico logado
export const getSolicitacoes = async (req: AuthRequest, res: Response) => {
  try {
    const { page = 1, limit = 20, search = '', status = '', prioridade = '', paciente_id } = req.query;
    
    // Obter dados do m√©dico logado
    const medicoId = req.user?.id;
    const clinicaId = req.user?.clinica_id;
    
    if (!medicoId || !clinicaId) {
      const response: ApiResponse = {
        success: false,
        message: 'Token inv√°lido ou m√©dico n√£o encontrado'
      };
      res.status(401).json(response);
      return;
    }
    
    console.log('üìã Recebendo requisi√ß√£o de solicita√ß√µes...');
    console.log('M√©dico logado:', { medicoId, clinicaId });
    console.log('Query params:', { page, limit, search, status, prioridade, paciente_id });
    
    const params = {
      page: Number(page),
      limit: Number(limit),
      search: search as string,
      status: status as string,
      prioridade: prioridade as string,
      paciente_id: paciente_id ? Number(paciente_id) : undefined,
      clinicaId,
      medicoId // Adicionar filtro por m√©dico
    };
    
    const result = await SolicitacaoModel.findAll(params);
    
    const response: ApiResponse = {
      success: true,
      message: 'Solicita√ß√µes listadas com sucesso',
      data: {
        solicitacoes: result.data,
        pagination: {
          page: Number(page),
          limit: Number(limit),
          total: result.total,
          totalPages: Math.ceil(result.total / Number(limit))
        }
      }
    };
    
    console.log(`‚úÖ Sucesso! ${result.data.length} solicita√ß√µes encontradas para o m√©dico ${medicoId}`);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erro ao listar solicita√ß√µes:', error);
    const response: ApiResponse = {
      success: false,
      message: 'Erro ao listar solicita√ß√µes',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
    res.status(500).json(response);
  }
};

// GET /api/mobile/solicitacoes/stats - Estat√≠sticas das solicita√ß√µes do m√©dico logado
export const getSolicitacoesStats = async (req: AuthRequest, res: Response) => {
  try {
    // Obter dados do m√©dico logado
    const medicoId = req.user?.id;
    const clinicaId = req.user?.clinica_id;
    
    if (!medicoId || !clinicaId) {
      const response: ApiResponse = {
        success: false,
        message: 'Token inv√°lido ou m√©dico n√£o encontrado'
      };
      res.status(401).json(response);
      return;
    }
    
    console.log('üìä Recebendo requisi√ß√£o de estat√≠sticas de solicita√ß√µes...');
    console.log('M√©dico logado:', { medicoId, clinicaId });
    
    const stats = await SolicitacaoModel.getStats(clinicaId, medicoId);
    
    const response: ApiResponse = {
      success: true,
      message: 'Estat√≠sticas de solicita√ß√µes carregadas com sucesso',
      data: stats
    };
    
    console.log('‚úÖ Estat√≠sticas de solicita√ß√µes carregadas para o m√©dico:', stats);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar estat√≠sticas de solicita√ß√µes:', error);
    const response: ApiResponse = {
      success: false,
      message: 'Erro ao buscar estat√≠sticas de solicita√ß√µes',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
    res.status(500).json(response);
  }
};

// GET /api/mobile/solicitacoes/:id - Buscar solicita√ß√£o por ID
export const getSolicitacaoById = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const solicitacaoId = parseInt(id);
    
    if (isNaN(solicitacaoId)) {
      const response: ApiResponse = {
        success: false,
        message: 'ID da solicita√ß√£o inv√°lido'
      };
      return res.status(400).json(response);
    }
    
    console.log(`üîç Buscando solicita√ß√£o ID: ${solicitacaoId}`);
    
    const solicitacao = await SolicitacaoModel.findById(solicitacaoId);
    
    if (!solicitacao) {
      const response: ApiResponse = {
        success: false,
        message: 'Solicita√ß√£o n√£o encontrada'
      };
      return res.status(404).json(response);
    }
    
    const response: ApiResponse = {
      success: true,
      message: 'Solicita√ß√£o encontrada com sucesso',
      data: solicitacao
    };
    
    console.log('‚úÖ Solicita√ß√£o encontrada:', solicitacao.protocolo);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar solicita√ß√£o:', error);
    const response: ApiResponse = {
      success: false,
      message: 'Erro ao buscar solicita√ß√£o',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
    res.status(500).json(response);
  }
};

// POST /api/mobile/solicitacoes - Criar nova solicita√ß√£o
export const createSolicitacao = async (req: AuthRequest, res: Response) => {
  try {
    const { paciente_id, protocolo, cid, prioridade, observacoes } = req.body;
    
    console.log('‚ûï Recebendo requisi√ß√£o para criar solicita√ß√£o...');
    console.log('Dados:', { paciente_id, protocolo, cid, prioridade, observacoes });
    
    // Valida√ß√µes b√°sicas
    if (!paciente_id || !protocolo || !cid || !prioridade) {
      const response: ApiResponse = {
        success: false,
        message: 'Dados obrigat√≥rios: paciente_id, protocolo, cid, prioridade'
      };
      return res.status(400).json(response);
    }
    
    // Usar cl√≠nica ID 1 por padr√£o para teste
    const clinicaId = 1;
    
    const solicitacaoData = {
      paciente_id: Number(paciente_id),
      protocolo,
      cid,
      prioridade,
      observacoes
    };
    
    const solicitacao = await SolicitacaoModel.create(solicitacaoData, clinicaId);
    
    const response: ApiResponse = {
      success: true,
      message: 'Solicita√ß√£o criada com sucesso',
      data: solicitacao
    };
    
    console.log('‚úÖ Solicita√ß√£o criada:', solicitacao.id);
    res.status(201).json(response);
    
  } catch (error) {
    console.error('‚ùå Erro ao criar solicita√ß√£o:', error);
    const response: ApiResponse = {
      success: false,
      message: 'Erro ao criar solicita√ß√£o',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
    res.status(500).json(response);
  }
};

// PUT /api/mobile/solicitacoes/:id - Atualizar solicita√ß√£o
export const updateSolicitacao = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const { status, observacoes, justificativa_rejeicao } = req.body;
    
    const solicitacaoId = parseInt(id);
    
    if (isNaN(solicitacaoId)) {
      const response: ApiResponse = {
        success: false,
        message: 'ID da solicita√ß√£o inv√°lido'
      };
      return res.status(400).json(response);
    }
    
    console.log(`‚úèÔ∏è Recebendo requisi√ß√£o para atualizar solicita√ß√£o ID: ${solicitacaoId}`);
    console.log('Dados:', { status, observacoes, justificativa_rejeicao });
    
    const updateData = {
      status,
      observacoes,
      justificativa_rejeicao
    };
    
    const solicitacao = await SolicitacaoModel.update(solicitacaoId, updateData);
    
    if (!solicitacao) {
      const response: ApiResponse = {
        success: false,
        message: 'Solicita√ß√£o n√£o encontrada'
      };
      return res.status(404).json(response);
    }
    
    const response: ApiResponse = {
      success: true,
      message: 'Solicita√ß√£o atualizada com sucesso',
      data: solicitacao
    };
    
    console.log('‚úÖ Solicita√ß√£o atualizada:', solicitacao.id);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar solicita√ß√£o:', error);
    const response: ApiResponse = {
      success: false,
      message: 'Erro ao atualizar solicita√ß√£o',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
    res.status(500).json(response);
  }
};

// DELETE /api/mobile/solicitacoes/:id - Deletar solicita√ß√£o
export const deleteSolicitacao = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const solicitacaoId = parseInt(id);
    
    if (isNaN(solicitacaoId)) {
      const response: ApiResponse = {
        success: false,
        message: 'ID da solicita√ß√£o inv√°lido'
      };
      return res.status(400).json(response);
    }
    
    console.log(`üóëÔ∏è Recebendo requisi√ß√£o para deletar solicita√ß√£o ID: ${solicitacaoId}`);
    
    const deleted = await SolicitacaoModel.delete(solicitacaoId);
    
    if (!deleted) {
      const response: ApiResponse = {
        success: false,
        message: 'Solicita√ß√£o n√£o encontrada'
      };
      return res.status(404).json(response);
    }
    
    const response: ApiResponse = {
      success: true,
      message: 'Solicita√ß√£o deletada com sucesso'
    };
    
    console.log('‚úÖ Solicita√ß√£o deletada:', solicitacaoId);
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Erro ao deletar solicita√ß√£o:', error);
    const response: ApiResponse = {
      success: false,
      message: 'Erro ao deletar solicita√ß√£o',
      error: error instanceof Error ? error.message : 'Erro desconhecido'
    };
    res.status(500).json(response);
  }
};
